// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Authentication Models
model User {
  id                  String    @id @default(cuid())
  githubId            String    @unique @map("github_id")
  username            String    @unique
  email               String    @unique
  name                String?
  avatarUrl           String?   @map("avatar_url")
  githubAccessToken   String?   @db.Text @map("github_access_token") // Encrypted
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  repositories           Repository[]
  submissions            Submission[]
  courseStageCompletions CourseStageCompletion[]

  @@map("users")
}

// Application Models
model Language {
  id         String       @id @default(cuid())
  name       String       @unique
  slug       String       @unique
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")

  repositories   Repository[]
  courseLanguages CourseLanguage[]

  @@map("languages")
}

model Course {
  id               String        @id @default(cuid())
  name             String        @unique
  slug             String        @unique
  description      String?       @db.Text
  shortDescription String?       @map("short_description") // Brief one-line description
  shortName        String?       @map("short_name")
  difficulty       String        @default("medium") // very_easy, easy, medium, hard
  releaseStatus    String        @default("live") @map("release_status") // alpha, beta, live
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  stages          CourseStage[]
  repositories    Repository[]
  courseLanguages CourseLanguage[]

  @@map("courses")
}

model CourseLanguage {
  id         String   @id @default(cuid())
  courseId   String   @map("course_id")
  languageId String   @map("language_id")
  createdAt  DateTime @default(now()) @map("created_at")

  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@unique([courseId, languageId])
  @@index([courseId])
  @@index([languageId])
  @@map("course_languages")
}

model CourseStage {
  id              String    @id @default(cuid())
  courseId        String    @map("course_id")
  name            String
  slug            String
  description     String?   @db.Text
  position        Int
  difficultyLevel Int       @default(1) @map("difficulty_level")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  course       Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions  Submission[]
  completions  CourseStageCompletion[]

  @@unique([courseId, slug])
  @@unique([courseId, position])
  @@index([courseId, position])
  @@map("course_stages")
}

model Repository {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  courseId        String    @map("course_id")
  languageId      String    @map("language_id")
  githubRepoName  String    @map("github_repo_name")
  githubRepoId    String?   @unique @map("github_repo_id")
  cloneUrl        String    @map("clone_url")
  htmlUrl         String    @map("html_url")
  status          String    @default("active") // active, archived
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course       @relation(fields: [courseId], references: [id])
  language    Language     @relation(fields: [languageId], references: [id])
  submissions Submission[]

  @@unique([userId, courseId, languageId])
  @@index([userId])
  @@index([courseId])
  @@map("repositories")
}

model Submission {
  id             String   @id @default(cuid())
  repositoryId   String   @map("repository_id")
  userId         String   @map("user_id")
  stageId        String   @map("stage_id")
  commitSha      String   @map("commit_sha")
  status         String   @default("pending") // pending, running, passed, failed
  testOutput     String?  @db.Text @map("test_output")
  outputSummary  String?  @map("output_summary") // Brief summary of test results
  createdAt      DateTime @default(now()) @map("created_at")
  completedAt    DateTime? @map("completed_at")

  repository Repository  @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  stage      CourseStage @relation(fields: [stageId], references: [id])

  @@index([repositoryId, stageId])
  @@index([userId])
  @@index([status])
  @@map("submissions")
}

model CourseStageCompletion {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  stageId     String   @map("stage_id")
  completedAt DateTime @default(now()) @map("completed_at")

  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  stage CourseStage @relation(fields: [stageId], references: [id])

  @@unique([userId, stageId])
  @@index([userId])
  @@index([stageId])
  @@map("course_stage_completions")
}
