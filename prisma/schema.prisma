// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  githubId      String?   @unique @map("github_id")
  githubLogin   String?   @unique @map("github_login")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts                 Account[]
  sessions                 Session[]
  repositories             Repository[]
  submissions              Submission[]
  courseStageCompletions   CourseStageCompletion[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Application Models
model Language {
  id         String       @id @default(cuid())
  name       String       @unique
  slug       String       @unique
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")

  repositories Repository[]

  @@map("languages")
}

model Course {
  id          String        @id @default(cuid())
  name        String        @unique
  slug        String        @unique
  description String?       @db.Text
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  stages       CourseStage[]
  repositories Repository[]

  @@map("courses")
}

model CourseStage {
  id              String    @id @default(cuid())
  courseId        String    @map("course_id")
  name            String
  slug            String
  description     String?   @db.Text
  position        Int
  difficultyLevel Int       @default(1) @map("difficulty_level")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  course       Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions  Submission[]
  completions  CourseStageCompletion[]

  @@unique([courseId, slug])
  @@unique([courseId, position])
  @@index([courseId, position])
  @@map("course_stages")
}

model Repository {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  courseId        String    @map("course_id")
  languageId      String    @map("language_id")
  githubRepoName  String    @map("github_repo_name")
  githubRepoId    String?   @unique @map("github_repo_id")
  cloneUrl        String    @map("clone_url")
  htmlUrl         String    @map("html_url")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course       @relation(fields: [courseId], references: [id])
  language    Language     @relation(fields: [languageId], references: [id])
  submissions Submission[]

  @@unique([userId, courseId, languageId])
  @@index([userId])
  @@index([courseId])
  @@map("repositories")
}

model Submission {
  id            String   @id @default(cuid())
  repositoryId  String   @map("repository_id")
  userId        String   @map("user_id")
  stageId       String   @map("stage_id")
  commitSha     String   @map("commit_sha")
  status        String   @default("pending") // pending, running, passed, failed
  testOutput    String?  @db.Text @map("test_output")
  createdAt     DateTime @default(now()) @map("created_at")
  completedAt   DateTime? @map("completed_at")

  repository Repository  @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  stage      CourseStage @relation(fields: [stageId], references: [id])

  @@index([repositoryId, stageId])
  @@index([userId])
  @@index([status])
  @@map("submissions")
}

model CourseStageCompletion {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  stageId     String   @map("stage_id")
  completedAt DateTime @default(now()) @map("completed_at")

  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  stage CourseStage @relation(fields: [stageId], references: [id])

  @@unique([userId, stageId])
  @@index([userId])
  @@index([stageId])
  @@map("course_stage_completions")
}
